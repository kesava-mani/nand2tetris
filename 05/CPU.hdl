// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

  PARTS:
    // Instruction decode
    Not(in=instruction[15],out=AInst);
    Not(in=AInst, out=CInst);
    Mux16(a=AluOut, b[15]=false,b[0..14]=instruction[0..14], sel=AInst, out=ARegOut);

    // ARegister handling
    And(a=CInst, b=instruction[5], out=AluToA);
    Or(a=AluToA, b=AInst, out=ARegLoad);
    ARegister(in=ARegOut, load=ARegLoad, out=AReg, out[0..14]=addressM);

    // DRegister handling
    And(a=CInst, b=instruction[4], out=DRegLoad);
    DRegister(in=AluOut, load=DRegLoad, out=x);

    // 'a' bit in C instruction
    And(a=CInst, b=instruction[12], out=aBitSel);
    Mux16(a=AReg, b=inM, sel=aBitSel, out=y);

    // ALU with outM
    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6], out=AluOut, out=outM, zr=zrOut, ng=ngOut);

    // writeM output if it's a C instruction
    And(a=CInst, b=instruction[3], out=writeM);

    // PC inputs
    // Load input
    Not(in=ngOut, out=gOut);
    Not(in=zrOut, out=notZeroOut);
    // Evaluvating ALU control out and j1,j2,j3 of C instruction whether to jump or not
    And(a=gOut, b=notZeroOut, out=ChkGrt);
    And(a=ngOut, b=instruction[2], out=ChkNeg);
    And(a=zrOut, b=instruction[1], out=ChkEq);
    And(a=ChkGrt, b=instruction[0], out=ChkPos);

    Or(a=ChkNeg, b=ChkPos, out=NegOrPos);
    Or(a=NegOrPos, b=ChkEq, out=ChkLoad);
    // Check if C instruction
    And(a=CInst, b=ChkLoad, out=PCLoad);
    // If not for jumping, increment PC
    Not(in=PCLoad, out=PCInc);
    PC(in=AReg, load=PCLoad, inc=PCInc, reset=reset, out[0..14]=pc);
}
